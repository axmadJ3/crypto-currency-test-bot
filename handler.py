import logging
import asyncio
from aiogram import F, Router
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove

from states import CryptoForm
from utils import get_crypto_price, create_crypto_button, cryptocurrencies, balance_info_buttons

router = Router()

initial_balance = 100  # –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª
grid_parts = 10  # –ù–∞ —Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π –¥–µ–ª–∏–º –∫–∞–ø–∏—Ç–∞–ª
balance_per_grid = initial_balance / grid_parts  # –°—É–º–º–∞ –Ω–∞ –∫–∞–∂–¥—É—é –ø–æ–∫—É–ø–∫—É
purchase_grid = {}  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫ –ø–æ —Å–µ—Ç–∫–µ
percent = 1  # –ü—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è —Å–µ—Ç–æ—á–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
trading_active = False


# ======================== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ============================


async def fetch_crypto_price(symbol: str, message: Message) -> float:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –ø–æ —Å–∏–º–≤–æ–ª—É"""
    try:
        crypto = await get_crypto_price(symbol)  
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ None
        if crypto is None:
            logging.error(f"–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è —Å–∏–º–≤–æ–ª–∞: {symbol}")
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã –¥–ª—è {symbol}.\n–í–≤–µ–¥–∏—Ç–µ '–ù–µ—Ç' —á—Ç–æ –±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é")
            raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã {symbol}.")

        return crypto

    except KeyError:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è —Å–∏–º–≤–æ–ª–∞: {symbol}")
        await message.answer(f"–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        raise ValueError(f"–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã –¥–ª—è {symbol}: {str(e)}")
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã –¥–ª—è {symbol}.\n–í–≤–µ–¥–∏—Ç–µ '–ù–µ—Ç' —á—Ç–æ –±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é")
        raise ValueError(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã –¥–ª—è {symbol}.")


async def update_grid_prices(symbol: str, message: Message):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è —Å–µ—Ç–æ—á–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    global purchase_grid
    current_price = await fetch_crypto_price(symbol, message)
    logging.info(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ç–æ—á–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è {symbol}, —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price} USDT")

    for i in range(grid_parts):
        purchase_grid[i] = {
            'buy_price': current_price * (1 - (percent / 100) * (i + 1)),
            'sell_price': None,
            'quantity': 0
        }


# ======================== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ================================


@router.message(CommandStart())
async def start_cmd(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CryptoBot, {message.from_user.username}! "
        f"\n–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç! "
        f"\n–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—Éüëá", 
        reply_markup=create_crypto_button()
    )
    
    await state.set_state(CryptoForm.crypto_symbol)


@router.message(F.text.in_(cryptocurrencies), StateFilter(CryptoForm.crypto_symbol))
async def crypto_price_info(message: Message, state: FSMContext):
    symbol = message.text
    try:
        await state.update_data(symbol=symbol)

        price = await fetch_crypto_price(symbol, message)  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º await
        await message.answer(f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {symbol}: {price} ($) USD. –†–∞–∑—Ä–µ—à–∏—Ç—å –±–æ—Ç—É —Ç–æ—Ä–≥–æ–≤–∞—Ç—å? (–î–∞/–ù–µ—Ç)", 
                             reply_markup=ReplyKeyboardRemove())
        await state.set_state(CryptoForm.action)  # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –≤–≤–µ—Å—Ç–∏ —Å–∏–º–≤–æ–ª.")
        logging.error(f'–û—à–∏–±–∫–∞: {str(e)}.')


@router.message(StateFilter(CryptoForm.action))
async def process_action(message: Message, state: FSMContext):
    global trading_active
    data = await state.get_data()
    symbol = data.get('symbol')
    
    if message.text.lower() == '–¥–∞':
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑—Ä–µ—à–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤–ª—é
        trading_active = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
        price = await fetch_crypto_price(symbol, message)
        await message.answer(
            f"–¢–æ—Ä–≥–æ–≤–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –¥–ª—è {symbol}. –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {price:.2f} USDT.\n–í–Ω–∏–∑—É –≤—ã –º–æ–∂–µ—Ç–µ –≤–∏–¥–µ—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ç–æ—Ä–≥–æ–≤–ª–∏.",
            reply_markup=balance_info_buttons
        )
        await start_trading(symbol, message)
          
    elif message.text.lower() == '–Ω–µ—Ç':
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω—è–µ—Ç —Ç–æ—Ä–≥–æ–≤–ª—é
        trading_active = False  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é
        await state.clear()
        await message.answer(
            "–¢–æ—Ä–≥–æ–≤–ª—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É:",
            reply_markup=create_crypto_button()
        )
        await state.set_state(CryptoForm.crypto_symbol)
        
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")
        

@router.message(F.text == "–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å", StateFilter(None))
async def show_balance(message: Message):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞"""
    await message.answer(f"–¢–µ–∫—É—â–∏–π –∫–∞–ø–∏—Ç–∞–ª: {initial_balance:.2f} USD")


@router.message(F.text == "–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞", StateFilter(None))
async def show_price(message: Message, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
    data = await state.get_data()
    symbol = data.get('symbol')
    
    if symbol:
        price = await fetch_crypto_price(symbol, message)
        await message.answer(f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {symbol}: {price:.2f} USD")
    else:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É.")


@router.message(F.text == "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é", StateFilter(None))
async def stop_trading(message: Message, state: FSMContext):
    global initial_balance, purchase_grid
    initial_balance = 100  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª
    purchase_grid.clear()  # –û—á–∏—â–∞–µ–º —Å–µ—Ç–∫–∏ –ø–æ–∫—É–ø–æ–∫/–ø—Ä–æ–¥–∞–∂
    await message.answer("–¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ –∫–∞–ø–∏—Ç–∞–ª —Å–±—Ä–æ—à–µ–Ω.", reply_markup=create_crypto_button())
    await state.set_state(CryptoForm.crypto_symbol)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
    await state.clear()


# ======================== –¢–æ—Ä–≥–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ ================================


async def start_trading(symbol: str, message: Message):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ —Å–µ—Ç–æ—á–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
    global initial_balance, trading_active

    await update_grid_prices(symbol, message)

    while initial_balance > 0 and trading_active:  # –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–ª–∞–≥–∞
        try:
            current_price = await fetch_crypto_price(symbol, message)
            logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞ {symbol}: {current_price:.2f} USDT")
            await message.answer(f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞ {symbol}: {current_price:.2f} USDT")

            for i in range(grid_parts):
                grid = purchase_grid[i]

                # –ü–æ–∫—É–ø–∫–∞
                if grid['quantity'] == 0 and current_price <= grid['buy_price']:
                    grid['quantity'] = balance_per_grid / current_price
                    initial_balance -= balance_per_grid
                    grid['sell_price'] = current_price * (1 + percent / 100)
                    logging.info(f"–ö—É–ø–∏–ª–∏ {grid['quantity']:.6f} {symbol} –ø–æ —Ü–µ–Ω–µ {current_price:.2f} USDT")
                    await message.answer(f"–ö—É–ø–∏–ª–∏ {grid['quantity']:.6f} {symbol} –ø–æ —Ü–µ–Ω–µ {current_price:.2f} USDT")

                # –ü—Ä–æ–¥–∞–∂–∞
                elif grid['quantity'] > 0 and current_price >= grid['sell_price']:
                    earnings = grid['quantity'] * current_price
                    initial_balance += earnings
                    logging.info(f"–ü—Ä–æ–¥–∞–ª–∏ {grid['quantity']:.6f} {symbol} –ø–æ —Ü–µ–Ω–µ {current_price:.2f} USDT")
                    await message.answer(f"–ü—Ä–æ–¥–∞–ª–∏ {grid['quantity']:.6f} {symbol} –ø–æ —Ü–µ–Ω–µ {current_price:.2f} USDT")

                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Ç–∫—É –ø–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏
                    grid['quantity'] = 0
                    grid['buy_price'] = current_price * (1 - percent / 100)
                    grid['sell_price'] = None

            await asyncio.sleep(15)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–ª–µ: {str(e)}")
            await asyncio.sleep(15)  # –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
